import {
  Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent,
  HttpResponseNotFound, HttpResponseOK, Post
} from '@foal/core';
import { getRepository, Any } from 'typeorm';
import { Reservation } from '../entities';

export class ReservationController {

  //list de toutes les reservations
  @Get('/list')
  async getReservation() {
    const reservations = await getRepository(Reservation).find();
    return new HttpResponseOK(reservations);
  }

  //ajour reservation
  @Post('/add')
  async postReservation(ctx: Context) {
    // Create a new resto with the body of the HTTP request.
    const reservation = new Reservation();
    reservation.dateTime = ctx.request.body.dateTime;
    reservation.midi = ctx.request.body.midi;
    reservation.soir = ctx.request.body.soir;
    reservation.table = ctx.request.body.table;
    reservation.nbCouverts = ctx.request.body.nbCouverts;
    reservation.nameClient = ctx.request.body.nameClient;
    reservation.tel = ctx.request.body.tel;
    reservation.resto = ctx.request.body.resto
    // Save the resto in the database.
    await getRepository(Reservation).save(reservation);

    // Return the new resto with the id generated by the database. The status is 201.
    return new HttpResponseCreated(reservation);


  }

  //list reservation par resto
  @Get('/list/:resto')
  async getReservationResto(ctx: Context) {
    console.log(ctx.request);
    const reservations = await getRepository(Reservation).find({ resto: ctx.request.params.resto });
    return new HttpResponseOK(reservations);
  }

  //reservation par date 
  @Get('/list/date/:date')
  async getReservationDate(ctx: Context) {
    console.log(ctx.request);
    var date = ctx.request.params.date;
    var newdate = new Date(date);
   // console.log(newdate);
    const reservations = await getRepository(Reservation).find({ dateTime: newdate });
    return new HttpResponseOK(reservations);
  }

  //liste des clients 
  @Get('/clients')
  async getReservationClients(ctx: Context) {
    //var clients:Array<any>;
    var clients : any = [];
    const reservations = await getRepository(Reservation).find();
    var customer;
    reservations.forEach(reservation => {
      customer = {
        "nameClient": reservation.nameClient,
        "tel": reservation.tel
      }
      clients.push(customer);
      
    });
    console.log(clients);
    var cache = {};
    clients = clients.filter(function (elem, index, array) {
      return cache[elem.nameClient] ? 0 : cache[elem.nameClient] = 1;
    });
   
    return new HttpResponseOK(clients);
  }

  //reservation date midi ou soir
  @Get('/:date/:midi/:soir')
  async getReservationMidiSoir(ctx: Context) {
    var date = ctx.request.params.date;
    var newdate = new Date(date);
    var midi = ctx.request.params.midi;
    var soir = ctx.request.params.soir
    var total = 0;
    const reservations = await getRepository(Reservation).find({ dateTime: newdate, midi: midi, soir: soir });
    reservations.forEach(reservation => {
      total += reservation.nbCouverts;
    })
    return new HttpResponseOK({total});
  }

  //numero de table d'une reservation 

  @Get('/table/:date/:midi/:soir/:nameClient')
  async getNumberTable(ctx: Context) {
    var date = ctx.request.params.date;
    var newdate = new Date(date);
    var midi = ctx.request.params.midi;
    var soir = ctx.request.params.soir
    var nameClient = ctx.request.params.nameClient;
    
    const reservation = await getRepository(Reservation).findOne({ dateTime: newdate, midi: midi, soir: soir, nameClient: nameClient });
    if(reservation === undefined){
      return new HttpResponseNotFound();
    }
    return new HttpResponseOK(reservation.table);
  }
}